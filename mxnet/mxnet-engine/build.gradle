group "ai.djl.mxnet"

repositories {
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

dependencies {
    api project(":api")
    api project(":mxnet:javacpp")

    testRuntimeOnly "ai.djl.mxnet:mxnet-native-auto:${mxnet_version}-SNAPSHOT"
    testImplementation project(":basicdataset")
    testImplementation project(":model-zoo")
    testImplementation(project(":testing"))

    testImplementation("org.testng:testng:${testng_version}") {
        exclude group: "junit", module: "junit"
    }
    testImplementation "org.slf4j:slf4j-simple:${slf4j_version}"
    testImplementation "org.powermock:powermock-module-testng:${powermock_version}"
    testImplementation "org.powermock:powermock-api-mockito2:${powermock_version}"
}

test {
    environment "PATH", "src/test/bin:${environment.PATH}"
}

import java.util.regex.Matcher
import java.util.regex.Pattern

def checkForUpdate(String path, String url) {
    def expected = new URL(url).text
    def actual = new File("${project.projectDir}/src/main/include/${path}").text
    if (!actual.equals(expected)) {
        def fileName = path.replaceAll("[/\\\\]", '_')
        file("${project.projectDir}/build").mkdirs()
        (file("${project.projectDir}/build/${fileName}")).text = expected
        logger.warn("[\033[31mWARN\033[0m ] Header file has been changed in open source project: ${path}.")
    }
}

task checkHeaderFile() {
    if (gradle.startParameter.offline) {
        logger.warn("[\033[31mWARN\033[0m ] Ignore header validation in offline mode.")
        return
    }

    def mxnetUrl = "https://raw.githubusercontent.com/apache/incubator-mxnet/master/"
    checkForUpdate("mxnet/c_api.h", "${mxnetUrl}/include/mxnet/c_api.h")
    def content = new URL("https://github.com/apache/incubator-mxnet/tree/master/3rdparty").text

    Pattern pattern = Pattern.compile("href=\"/apache/incubator-tvm/tree/([a-z0-9]+)\"")
    Matcher m = pattern.matcher(content);
    if (!m.find()) {
        throw new GradleException("Failed to retrieve submodule hash for tvm from github")
    }
    String hash = m.group(1);

    def nnvmUrl = "https://raw.githubusercontent.com/apache/incubator-tvm/${hash}"
    checkForUpdate("nnvm/c_api.h", "${nnvmUrl}/nnvm/include/nnvm/c_api.h")
}

publishing {
    publications {
        maven(MavenPublication) {
            pom {
                name = "MXNet Engine Adapter"
                description = "MXNet Engine Adapter for DJL"
                url = "http://www.djl.ai/mxnet/${project.name}"
            }
        }
    }
}
